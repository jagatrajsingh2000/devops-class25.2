name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      action:
        description: 'Deployment action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - rollback

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.16.1'

jobs:
  manual-deploy:
    name: Manual Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Generate Prisma client
      run: cd packages/prisma && pnpm prisma generate

    - name: Build application
      run: pnpm run build

    - name: Create deployment package
      run: |
        # Create a temporary directory for deployment
        mkdir -p deployment-temp
        
        # Copy only the necessary files
        cp -r apps deployment-temp/
        cp -r packages deployment-temp/
        cp -r scripts deployment-temp/
        cp package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json deployment-temp/
        cp engineex.conf deployment-temp/ 2>/dev/null || true
        
        # Create the archive from the temp directory
        cd deployment-temp
        tar -czf ../deployment.tar.gz .
        cd ..
        
        # Clean up temp directory
        rm -rf deployment-temp

    - name: Deploy to VM
      if: ${{ inputs.action == 'deploy' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: ${{ secrets.VM_PORT }}
        script: |
          # Create backup of current deployment
          if [ -d "/home/ubuntu/devops-class25.2" ]; then
            sudo mv /home/ubuntu/devops-class25.2 /home/ubuntu/devops-class25.2.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Create new deployment directory
          mkdir -p /home/ubuntu/devops-class25.2
          cd /home/ubuntu/devops-class25.2

    - name: Copy files to VM
      if: ${{ inputs.action == 'deploy' }}
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: ${{ secrets.VM_PORT }}
        source: "deployment.tar.gz"
        target: "/home/ubuntu/devops-class25.2/"

    - name: Execute deployment
      if: ${{ inputs.action == 'deploy' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: ${{ secrets.VM_PORT }}
        script: |
          cd /home/ubuntu/devops-class25.2
          
          # Extract deployment package
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz
          
          # Install Node.js if not already installed
          if ! command -v node &> /dev/null; then
            echo "Installing Node.js..."
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          
          # Install pnpm if not already installed
          if ! command -v pnpm &> /dev/null; then
            echo "Installing pnpm..."
            sudo npm install -g pnpm@10.16.1
          fi
          
          # Run deployment script
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh

    - name: Execute rollback
      if: ${{ inputs.action == 'rollback' }}
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USERNAME }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: ${{ secrets.VM_PORT }}
        script: |
          cd /home/ubuntu/devops-class25.2
          
          # Run rollback script
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh
