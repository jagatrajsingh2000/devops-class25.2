name: Deploy to VM

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to VM
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.16.1

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: |
          cd packages/prisma
          pnpm prisma generate

      - name: Check types
        run: |
          pnpm run check-types

      - name: Build application
        run: |
          pnpm run build

      - name: Deploy to VM
        run: |
          echo "${{ secrets.VM_SSH_KEY }}" > ~/ssh_key
          chmod 600 ~/ssh_key
          
          # Deploy using direct SSH command (proven approach)
          ssh -i ~/ssh_key -o StrictHostKeyChecking=no ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} -p ${{ secrets.VM_PORT }} "
            echo 'ðŸš€ Starting deployment...'
            
            # Navigate to project directory
            cd /home/ubuntu/devops-class25.2 || (mkdir -p /home/ubuntu/devops-class25.2 && cd /home/ubuntu/devops-class25.2)
            
            # Pull latest code
            git pull origin main || echo 'Git pull failed, continuing with existing code'
            
            # Install Node.js if not already installed
            if ! command -v node &> /dev/null; then
              echo 'Installing Node.js...'
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Install pnpm if not already installed
            if ! command -v pnpm &> /dev/null; then
              echo 'Installing pnpm...'
              sudo npm install -g pnpm@10.16.1
            fi
            
            # Set memory limit and install dependencies
            export NODE_OPTIONS='--max-old-space-size=1024'
            echo 'Installing dependencies...'
            pnpm install --frozen-lockfile --prefer-offline --reporter=append-only
            
            # Generate Prisma client
            echo 'Generating Prisma client...'
            cd packages/prisma
            pnpm prisma generate
            cd ../..
            
            # Run database migrations
            echo 'Running database migrations...'
            cd packages/prisma
            pnpm prisma db push
            cd ../..
            
            # Build application
            echo 'Building application...'
            pnpm run build
            
            # Install PM2 if not already installed
            if ! command -v pm2 &> /dev/null; then
              echo 'Installing PM2...'
              sudo npm install -g pm2
            fi
            
            # Stop existing services
            echo 'Stopping existing services...'
            pm2 delete all 2>/dev/null || true
            
            # Start services
            echo 'Starting services...'
            pm2 start apps/http-server/dist/index.js --name 'http-server' -- --port 3002
            pm2 start apps/ws-server/dist/index.js --name 'ws-server' -- --port 8080
            pm2 start 'cd apps/web && npm start' --name 'web-server'
            
            # Save PM2 configuration
            pm2 save
            
            # Update nginx configuration
            if [ -f 'engineex.conf' ]; then
              echo 'Updating Nginx configuration...'
              sudo cp engineex.conf /etc/nginx/sites-available/devops-class25.2
              sudo ln -sf /etc/nginx/sites-available/devops-class25.2 /etc/nginx/sites-enabled/
              sudo nginx -t && sudo systemctl reload nginx
            fi
            
            echo 'âœ… Deployment completed successfully!'
            pm2 status
          "
